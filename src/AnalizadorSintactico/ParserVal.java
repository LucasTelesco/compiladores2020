package AnalizadorSintactico;//#############################################
//## file: Parser.java
//## Generated by Byacc/j
//#############################################

import AnalizadorLexico.LexicalAnalyzer;

/**
 * BYACC/J Semantic Value for parser: Parser
 * This class provides some of the functionality
 * of the yacc/C 'union' directive
 */
public class ParserVal {
  /**
   * integer value of this 'union'
   */
  public int ival;

  /**
   * double value of this 'union'
   */
  public double dval;

  /**
   * string value of this 'union'
   */
  public String sval;

  /**
   * object value of this 'union'
   */
  public Object obj;

//#############################################
//## C O N S T R U C T O R S
//#############################################

  /**
   * Initialize me without a value
   */

  public String mostrarToken(int valor) {

    if (valor == 0) {
      return "EOF";
    } else if (valor == LexicalAnalyzer.ID) {
      return "IDENTIFICADOR";
    } else if (valor == LexicalAnalyzer.LONGINT) {
      return "ENTERO LARGO";
    } else if (valor == LexicalAnalyzer.FLOTANTE) {
      return "FLOTANTE";
    } else if (valor == LexicalAnalyzer.CADENA_MULTINEA) {
      return "CADENA DE CARACTER";
    } else if (valor == LexicalAnalyzer.ASIG) {
      return "ASIGNACION";
    } else if (valor == LexicalAnalyzer.ID) {
      return "IDENTIFICADOR";
    } else if (valor == LexicalAnalyzer.ELSE) {
      return "PALABRA RESERVADA ELSE";
    } else if (valor == LexicalAnalyzer.END_IF) {
      return "PALABRA RESERVADA END_IF";
    } else if (valor == LexicalAnalyzer.IF) {
      return "PALABRA RESERVADA IF";
    } else if (valor == LexicalAnalyzer.LOOP) {
      return "PALABRA RESERVADA LOOP";
    } else if (valor == LexicalAnalyzer.UNTIL) {
      return "PALABRA RESERVADA UNTIL";
    } else if (valor == LexicalAnalyzer.MAYIG) {
      return "OPERADOR MAYOR IGUAL";
    } else if (valor == LexicalAnalyzer.MENIG) {
      return "OPERADOR MENOR IGUAL";
    } else if (valor == LexicalAnalyzer.DIST) {
      return "DISTINTO";
    } else if (valor < 255) {
      return "SIMBOLO " + (char) valor;
    }
    return "";
  }

  public ParserVal() {
    this.obj = null;
    this.sval = null;
  }

  /**
   * Initialize me as an int
   */
  public ParserVal(int val) {
    ival = val;
  }

  /**
   * Initialize me as a double
   */
  public ParserVal(double val) {
    dval = val;
  }

  /**
   * Initialize me as a string
   */
  public ParserVal(String val) {
    sval = val;
  }

  /**
   * Initialize me as an Object
   */
  public ParserVal(Object val) {
    obj = val;
  }
//end class

//#############################################
//## E N D    O F    F I L E
//#############################################

  /**
   * Compilador 2020 ids de tokens
   **/

  public final static short IF = 257;
  public final static short ELSE = 258;
  public final static short INTEGER = 260;
  public final static short ID = 261;
  public final static short CTE = 262;
  public final static short CADENA_MULTINEA = 263;
  public final static short ASIG = 264;
  public final static short MAYIG = 265;
  public final static short MENIG = 266;
  public final static short DIST = 267;
  public final static short FIN = 268;
  public final static short END_IF = 269;
  public final static short LOOP = 270;
  public final static short UNTIL = 271;
  public final static short FLOTANTE = 272;
  public final static short THEN = 273;
  public final static short OUT = 274;
  public final static short FUNC = 275;
  public final static short RETURN = 276;
  public final static short LONGINT = 277;
  public final static short FLOAT = 278;
  public final static short YYERRCODE = 256;
  public final static short COMENTARIO = 999;

  public enum TipoToken {

    //Palabras Reservadas
    THEN(ParserVal.THEN),
    OUT(ParserVal.OUT),
    FUNC(ParserVal.FUNC),
    RETURN(ParserVal.RETURN),
    LONGINT(ParserVal.LONGINT),
    FLOAT(ParserVal.FLOAT),
    IF(ParserVal.IF),
    ELSE(ParserVal.ELSE),
    END_IF(ParserVal.END_IF),

    INTEGER(ParserVal.INTEGER),

    LOOP(ParserVal.LOOP),
    UNTIL(ParserVal.UNTIL),


    //No Terminales
    CTE(ParserVal.CTE),
    ID(ParserVal.ID),

    FLOTANTE(ParserVal.FLOTANTE),


    //Literales
    OP_MAS((char) '+'),
    OP_MENOS((char) '-'),
    OP_POR((char) '*'),
    OP_DIVIDIDO((char) '/'),
    COMP_MAYOR((char) '>'),
    COMP_MENOR((char) '<'),
    PARENTESIS_ABIERTO((char) '('),
    PARENTESIS_CERRADO((char) ')'),
    CORCHETE_ABIERTO((char) '['),
    CORCHETE_CERRADO((char) ']'),
    LLAVE_ABIERTA((char) '{'),
    LLAVE_CERRADA((char) '}'),
    COMA((char) ','),
    PUNTO_Y_COMA((char) ';'),


    //No Literales importantes
    MAYIG(ParserVal.MAYIG),
    MENIG(ParserVal.MENIG),
    DIST(ParserVal.DIST),
    ASIG(ParserVal.ASIG),
    FIN(0),
    YYERRCODE(ParserVal.YYERRCODE);


    private int valor;

    private TipoToken(int id) {
      this.setValor(id);
    }


    public int getValor() {
      return valor;
    }

    public void setValor(int valor) {
      this.valor = valor;
    }
  }

  private String lexema;
  private TipoToken tipo;
  private int columna;

  public int getColumna() {
    return columna;
  }

  public void setColumna(int columna) {
    this.columna = columna;
  }

  public int getFila() {
    return fila;
  }

  public void setFila(int fila) {
    this.fila = fila;
  }

  private int fila;
  private boolean reservado;
  private int contador = 1;


  public String getLexema() {
    return this.lexema;
  }

  public void setLexema(String lexema) {
    this.lexema = lexema;
  }


  public String toString() {
    if (this.obj!=null){
      return obj.toString();
    }
    else{
      if (this.sval!=null)
        return this.sval;

      return mostrarToken(this.ival);
    }
  }

  public boolean isReservado() {
    return reservado;
  }

  public void setReservado(boolean r) {
    this.reservado = r;
  }

  public void aumentarContador(){
    contador++;
  }

  public void disminuirContador(){
    contador--;
  }

  public int getContador(){
    return contador;
  }

}

